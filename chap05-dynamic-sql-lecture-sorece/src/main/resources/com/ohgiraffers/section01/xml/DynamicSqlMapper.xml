<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">

    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">
        <id property="code" column="menu_code"/>
        <result property="name" column="menu_name"/>
        <result property="price" column="menu_price"/>
        <result property="categoryCode" column="category_code"/>
        <result property="orderableStatus" column="orderable_status"/>
    </resultMap>
    <!-- 다이나믹 쿼리에서 사용하는 비교 연산자
        xml 파일 특성상 >,< 사용 불가능
        gte (greater than or equal to) : >=
        gt (greater than) : >
        lte (less than or equal to) : <=
        lt (less than) : <
    -->
    <!-- <![CDATA[문장]]> :  문장에 해당하는 공간에서는 부등호에 대한 표현이 자유로움  -->
    <!-- <if> 태그 : test 속성의 조건에 해당할 때만 엘리먼트 구문을 쿼리에 포함한다. -->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from tbl_menu a
        where a.orderable_status = 'Y'
        <!-- 0 =< price <= 10000 -->
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
            and a.menu_price < #{ price }
            ]]>
        </if>
        <!-- 10000 < price <= 20000 -->
        <if test="price gt 10000 and price lte 20000">
            and a.menu_price between 10000 and #{ price }
        </if>
        <!-- 20000 < price <= 30000 -->
        <if test="price gt 20000 and price lte 30000">
            and a.menu_price between 20000 and #{ price }
        </if>
        <!-- 30000 < price -->
        <if test="price gt 30000">
            and a.menu_price between 30000 and #{ price }
        </if>
        order by a.menu_code

    </select>
    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from tbl_menu a
        <if test="condition == 'category'">
            join tbl_category b on (a.category_code = b.category_code)
        </if>
        where a.orderable_status = 'Y'
        <if test="condition == 'name'">
            and a.menu_name like concat('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
            and b.category_name = #{ value }
        </if>
        order by a.menu_code
    </select>

    <!-- <choose>(when, otherwise) 태그는 Java switch-case문 같은 역할을 한다. -->
    <!-- 사용하는 방법
        <choose>
            <when test = "조건">
                쿼리문
            </when>
            ...
            <otherwise>
                쿼리구문
            </otherwise>
        </choose>
        <when> 태그 test 속성 조건에 부합하면 <when> 엘리먼트 구문을 쿼리에 포함한다.
        어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함한다.
    -->
    <select id="searchMenuBySubCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from tbl_menu a
        where a.orderable_status = 'Y'
        <choose>
            <when test="value == '식사'">
                and a.category_code in (1, 4, 5, 6, 7)
            </when>
            <when test="value == '음료'">
                and a.category_code in (2, 8, 9, 10)
            </when>
            <otherwise>
                and a.category_code in (3, 11, 12)
            </otherwise>
        </choose>
        order by a.menu_code
    </select>

<!-- <foreach> 태그 : Java의 for문 역할을 한다.
                 1. collection 속성 : 반복을 수행할 대상
                 2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                 3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
                 4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
                 5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자-->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from tbl_menu a
        where a.orderable_status = 'Y'
        and a.menu_code in
       <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">
<!--        parameter 객체로 받아오지 않고, static 필드 또는 static 메소드에 직접 접근하여 반환받아 사용가능
                - static 필드 접근 시 collection 속성 : @풀클래스명@필드명
                - static 메소드 접근시 collection 속성 : @풀클래스명@메소드명()
-->
<!--        <foreach collection="@com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList()"-->
<!--                 item="menuCode" open="(" separator=", " close=")">-->
            #{ menuCode }
        </foreach>
    </select>


<!-- <where> 태그 : 엘리먼트 구문이 where로 시작하지 않으면 자동으로 where를 붙여준다.
                   또한 where 엘리먼트 내부에 모든 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
                   단, name 부분에 where를 빼주지 않으면 where where로 where가 2개 생성 될 수 있다.
                   엘리먼트 구문이 AND나 OR로 시작하면 자동으로 해당 단어를 지워준다.-->
    
    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">

    </select>

</mapper>